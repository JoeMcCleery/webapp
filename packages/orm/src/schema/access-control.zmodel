import 'base'
import 'user'

enum Operation {
  create
  read
  update
  delete
}

enum AccessArea {
  all
  users
  permissions
  assets
}

model UserRole extends Base {
  name        String               @length(min: 1) @unique

  users       User[]
  permissions UserRolePermission[]

  // users can read their own roles
  @@allow('read', users?[id == auth().id])
  // role based permissions
  @@allow('create', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'create')]])
  @@allow('read', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'read')]])
  @@allow('update', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'update')]])
  @@allow('delete', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'delete')]])
}

model UserRolePermission extends Base {
  operations  Operation[]
  accessAreas AccessArea[]

  userRoleId  String       @db.Uuid
  userRole    UserRole     @relation(fields: [userRoleId], references: [id], onDelete: Cascade)

  // users can read their own role permissions
  @@allow('read', check(userRole, 'read'))
  // role based permissions
  @@allow('create', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'create')]])
  @@allow('read', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'read')]])
  @@allow('update', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'update')]])
  @@allow('delete', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'delete')]])
}

model ModelWithPermissions extends Base {
  permissions ModelPermission[]

  modelType   String
  @@delegate(modelType)

  // model based permissions
  @@allow('create', auth().modelPermissions?[modelId == id && has(operations, 'create')])
  @@allow('read', auth().modelPermissions?[modelId == id && has(operations, 'read')])
  @@allow('update', auth().modelPermissions?[modelId == id && has(operations, 'update')])
  @@allow('delete', auth().modelPermissions?[modelId == id && has(operations, 'delete')])
}

model ModelPermission extends Base {
  operations Operation[]

  modelId    String               @db.Uuid
  model      ModelWithPermissions @relation(fields: [modelId], references: [id], onDelete: Cascade)
  userId     String               @db.Uuid
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  // users can read their own model permissions
  @@allow('read', auth() == user)
  // role based permissions
  @@allow('create', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'create')]])
  @@allow('read', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'read')]])
  @@allow('update', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'update')]])
  @@allow('delete', auth().userRoles?[permissions?[hasSome(accessAreas, ['all', 'permissions']) && has(operations, 'delete')]])
}